前缀树
实现 search，insert，startsWith 这三个功能
只用考虑 26 个小写字母

毫无印象了可还行。。。

山景城一姐：
这题就是简单版的 Google 字符智能匹配的实现

            abc...z
        / | | | | | \ \  ....   
     26 26 26 26 26 26 26 ....   
     
前缀树深度很大的话，会变得非常庞大     

LC 官方：
为什么需要 trie tree？
因为尽管哈希表能在 O(1) 时间内寻找 key value pair，却无法高效的完成以下操作：
1. 找到具有同一前缀的全部 keys
2. 按词典序枚举字符串的数据集

Trie tree 优于哈希表的另一个理由是，随着哈希表大小增加，会出现大量的 collision，时间复杂度可能增加到 O(n)，n 为插入 key 的数量。
与哈希表相比，Trie Tree 在存储多个具有相同前缀的 key 时可以使用较少的空间，只需要 O(m)的时间复杂度，m 为 key 的长度。
而在平衡树中查找 key value pair 需要 O(mlogn)时间复杂度

Trie Tree 是一个有 root 的数，TrieNode 具有以下字段：
1. 最多 R 个指向子节点的链接，其中每个链接对应字母表数据集中的一个字母
2. boolean 字段，以指定 node 是对应 key 的结尾还是只是 key 的前缀

这题需要配合 class TrieNode 共同使用
TrieNode 主要用 size 为 26 的 TrieNode 数组存，每个元素又分别代表一个 TrieNode，类似套娃

insert： 
我们通过搜索 Trie Tree 来 insert 一个键，有两种情况：
1. 链接存在。沿着链接移动到数的下一个子层。继续搜索
2. 链接不存在。创建一个新的 TrieNode，并将它与父节点的链接相连，该链接与当前的 key 字符相匹配
遍历完毕将当前节点标记为结束节点

search：
也是两种情况：
1. 存在链接。沿着链接移动到数的下一个子层。继续搜索
2. 不存在链接。如果已经没有键字符，并且当前 TrieNode 已经标记为 isEnd，就返回 true
  两种可能返回 false：
   1. 还有键字符剩余，但无法跟随 Trie Tree 的键路径，找不到 key
   2. 没有键字符剩余，但当前 TrieNode 没有被标记为 isEnd，也就是说只是找到该 key 的前缀

startsWith：
相当于是包含在 search 里面的一个子集
只要 node 不为空并且该 node 也不是字符串的结尾，就是前缀匹配成功





