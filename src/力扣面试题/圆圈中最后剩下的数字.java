package 力扣面试题;

/*  面试题 26：圆圈中最后剩下的数字
    0, 1,..., n-1 这 n 个数字排成一个圆圈，从数字 0 开始，每次从这个圆圈里删除第 m 个数字。求出这个圆圈里剩下的最后一个数字。
    例如，0、1、2、3、4 这 5 个数字组成一个圆圈，从数字 0 开始每次删除第 3 个数字，则删除的前 4 个数字依次是 2、0、4、1，因此最后剩下的数字是 3。

    示例 1：
    输入: n = 5, m = 3
    输出: 3

    示例 2：
    输入: n = 10, m = 17
    输出: 2

    限制：
    1 <= n <= 10^5
    1 <= m <= 10^6
 */

/*  数学解法：Time = O(n)
    0 1 2 3 4 -> 2
    3 4 0 1 -> 0
    1 3 4 -> 4
    1 3 -> 1
    最后剩下 3，下标为 0
    然后我们从最后剩下的 3 倒着看，我们可以反向推出这个数字在之前每个轮次的位置。
    第四轮反推，补上 m 个位置，然后模上当时的数组大小 2，位置是(0 + 3) % 2 = 1。
    第三轮反推，补上 m 个位置，然后模上当时的数组大小 3，位置是(1 + 3) % 3 = 1。
    第二轮反推，补上 m 个位置，然后模上当时的数组大小 4，位置是(1 + 3) % 4 = 0。
    第一轮反推，补上 m 个位置，然后模上当时的数组大小 5，位置是(0 + 3) % 5 = 3。
    所以最终剩下的数字的下标就是3。因为数组是从0开始的，所以最终的答案就是3。
    总结一下反推的过程，就是(当前index + m) % 上一轮剩余数字的个数
 */
public class 圆圈中最后剩下的数字 {
    public int lastRemaining(int n, int m) {
        int ans = 0;
        // 最后一轮剩下2个人，所以从2开始反推
        for (int i = 2; i <= n; i++) {
            ans = (ans + m) % i;
        }
        return ans;
    }
}

/*  Brute Force: Time = O(n^2)

        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            list.add(i);
        }
        int idx = 0;
        while (n > 1) {
            idx = (idx + m - 1) % n;
            list.remove(idx);
            n--;
        }
        return list.get(0);
 */