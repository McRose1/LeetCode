这题写起来实在是太难受了，tag 是 divide & conquer
给定一个字符串，通过添加括号优先符，来生成不同的运算结果：
"2*3-4*5":
(2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10

divide 过程实质上就是碰到 operator 就开始拆分：
2 * (3 - 4 * 5) -> -34, -10
2 * 3 - (4 * 5) -> -14
(2 * 3 - 4) * 5 -> 10, -10
这四个分法各自都可以继续往下分，所以就是利用递归（可以加上记忆化）
以第一条为例：
3 - 4 * 5 还可以分为：
(3 - 4) * 5
得到的 List<Integer> 就是 [-17, -5]
最后返回来和 2 乘就变成笛卡尔积形式：
[2] U* [-17, -10] = [-34, -10] 

这题我写起来非常不顺手，就算下次碰到估计还是没法写对，那就得强行记住了
