算过二叉树的 maximum depth，这次来算 minimum depth
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
A leaf is a node with no children

上次那题记得是直接调用自己

结果。。。照搬 maximum 就错了
比如：
        1
       /
      2
如果是 Math.min(minDepth(root.left), minDepth(root.right)) + 1 -> 0 + 1 -> 1 
实际上答案应该是 2，因为此时只有一个叶子节点

做出来了哈哈哈
其实就是多加一个判断
Math.min(minDepth(root.left), minDepth(root.right)) + 1 仅适用于左右子树都不会 null 的时候，所谓的公平竞争
如果有一方为 null 或者都为 null：
首先我们先考虑简单的都为 null 的情况，那么此时返回的就是当前层数 + 1
如果一方为 null，因为此时只要一个叶节点，所以直接返回该叶节点到 root 的距离
综合起来 Math.max(minDepth(root.left), minDepth(root.right)) + 1 可以满足

篮子王：
站在任意节点去想这个问题怎么做
临界条件：节点为 null，返回 0
