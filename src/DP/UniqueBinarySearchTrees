# 96. Unique Binary Search Trees
tree 类型的 DP 题

Catalan Numbers (Sequence)
1 -> 1
2 -> 2
3 -> 5
4 -> 14
5 -> 42

首先我们利用 BST（二叉搜索树）的特点：左子树上所有结点的值均小于它的根结点的值；右子树上所有结点的值均大于它的根结点的值

分别讨论不同 root 的情况
(1, 2) -> 1 + 1 = 2

  1         2
   \       /
    2     1

(1, 3) -> 2 + 1 + 2 = 5

    1           2            3
     \         / \          /
    (2, 3)    1   3       (1, 2)
    
G(n): Catalan numbers     
F(i, n): with i at the root and nums[1,2,3 ..., n].
G(3) = F(1, 3) + F(2, 3) + F(3, 3)

                   G(3)
          j /       j|         \j       j -> (1-n)
        F(1,3) +  F(2,3)  +   F(3,3)
      /      \     /    \      /   \  
    G(0) *  G(2)  G(1)*G(1)  G(2) * G(0)
    
F(i, n) = G(i - 1) * G(n - i)

相当于遍历确定 root 以后，该 root 的左右子节点又可以作为新的 root 继续往下延伸，往下延伸的这些可能性就是子问题

所以 dp[i]，就是在 0 -> i 中遍历每一个节点为 root，然后该 root 把整个数组分为左子树和右子树，dp[i] = 以各节点为 root 的左右子树可能性的乘积的累加

篮子王：

state: dp[i] 当前节点有多少 unique BST
init: dp[0] = 1, dp[1] = 1 
func: 
result: dp[n] 


n = 4:        1           2           3             4
            /   \       /   \       /   \         /    \
            0   3       1   2       2   1         3    0
           1  x  5     1  x  2     2  x  1       5  x  1     ->   14

1 为 root，左边没有节点，右边 3 个节点 -> G(0) x G(3) = 5
2 为 root，左边 1 个节点，右边 2 个节点 -> G(1) x G(2) = 2
3 为 root，左边 2 个节点，右边 1 个节点 -> G(2) x G(1) = 2
4 为 root，左边 3 个节点，右边没有节点 -> G(3) x G(0) = 5

dp[i] = sum(dp[j] * dp[i - j - 1]) 
